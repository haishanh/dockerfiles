on: [push]
name: Docker workflow

env:
  REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: ${{ github.actor }}/miniflux

jobs:
  miniflux_docker:
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/heads/miniflux/'))
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.17.6']
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          repository: 'miniflux/v2'

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - id: get-tag
        name: Extract tag from ref
        uses: actions/github-script@0.9.0
        with:
          script: |
            const segments = context.ref.split('/');
            const tag = segments[segments.length-1];
            core.setOutput('tag', tag);

      - name: Print Tag
        run: echo ${{ steps.get-tag.outputs.tag }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # - name: Docker meta
      #   id: docker_meta
      #   uses: docker/metadata-action@v3.5.0
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./packaging/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.get-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Send Notification
        uses: haishanh/actions-telegram-notification@v1
        if: ${{ always() }}
        with:
          notification-token: ${{ secrets.TG_NOTIFICATION_TOKEN }}
          job-status: ${{ job.status }}

  transparent_docker:
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/heads/transparent/'))
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.actor }}/transparent
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3.0.2

      - id: get-tag
        name: Extract tag from ref
        uses: actions/github-script@0.9.0
        with:
          script: |
            const segments = context.ref.split('/');
            const tag = segments[segments.length-1];
            core.setOutput('tag', tag);

      - name: Print Tag
        run: echo ${{ steps.get-tag.outputs.tag }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # - name: Docker meta
      #   id: docker_meta
      #   uses: docker/metadata-action@v3.5.0
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: ls -lh ./transparent

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./transparent
          # file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.get-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Send Notification
        uses: haishanh/actions-telegram-notification@v1
        if: ${{ always() }}
        with:
          notification-token: ${{ secrets.TG_NOTIFICATION_TOKEN }}
          job-status: ${{ job.status }}

  liteback_docker:
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/heads/liteback/'))
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.actor }}/liteback
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3.0.2

      - id: get-tag
        name: Extract tag from ref
        uses: actions/github-script@0.9.0
        with:
          script: |
            const segments = context.ref.split('/');
            const tag = segments[segments.length-1];
            core.setOutput('tag', tag);

      - name: Print Tag
        run: echo ${{ steps.get-tag.outputs.tag }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: ls -lh ./liteback

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./liteback
          # file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.get-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Send Notification
        uses: haishanh/actions-telegram-notification@v1
        if: ${{ always() }}
        with:
          notification-token: ${{ secrets.TG_NOTIFICATION_TOKEN }}
          job-status: ${{ job.status }}

  caddy_docker:
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/heads/caddy/'))
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.actor }}/caddy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3.0.2

      - id: get-tag
        name: Extract tag from ref
        uses: actions/github-script@0.9.0
        with:
          script: |
            const segments = context.ref.split('/');
            const tag = segments[segments.length-1];
            core.setOutput('tag', tag);

      - name: Print Tag
        run: echo ${{ steps.get-tag.outputs.tag }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: ls -lh ./caddy

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./caddy
          # file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.get-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Send Notification
        uses: haishanh/actions-telegram-notification@v1
        if: ${{ always() }}
        with:
          notification-token: ${{ secrets.TG_NOTIFICATION_TOKEN }}
          job-status: ${{ job.status }}

  pocketbase_docker:
    if: github.event_name == 'push' && (startsWith(github.event.ref, 'refs/heads/pocketbase/'))
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.actor }}/pocketbase
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3.0.2

      - id: get-tag
        name: Extract tag from ref
        uses: actions/github-script@0.9.0
        with:
          script: |
            const segments = context.ref.split('/');
            const tag = segments[segments.length-1];
            core.setOutput('tag', tag);

      - name: Print Tag
        run: echo ${{ steps.get-tag.outputs.tag }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: ls -lh ./pocketbase

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./pocketbase
          # file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.get-tag.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Send Notification
        uses: haishanh/actions-telegram-notification@v1
        if: ${{ always() }}
        with:
          notification-token: ${{ secrets.TG_NOTIFICATION_TOKEN }}
          job-status: ${{ job.status }}
